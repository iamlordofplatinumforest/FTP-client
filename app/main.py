import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
from ftplib import FTP, FTP_TLS, error_perm
import os
import socket
from threading import Thread, Lock
from queue import Queue
from datetime import datetime
import time
import humanize
import json
import re
from typing import Dict, List, Tuple


class FTPClientApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced FTP Client")
        self.root.geometry("1400x750")

        self.ftp = None
        self.ftp_lock = Lock()
        self.current_remote_dir = "/"
        self.current_local_dir = os.path.expanduser("~/Downloads")

        self.remote_cache = {}
        self.local_cache = {}
        self.cache_ttl = 30
        self.task_queue = Queue()
        self.running = True
        self.worker_thread = None

        self.connection_history_file = os.path.join(os.path.expanduser("~"), ".ftp_client_history.json")
        self.bookmarks_file = os.path.join(os.path.expanduser("~"), ".ftp_client_bookmarks.json")
        self.connection_history = self.load_connection_history()
        self.bookmarks = self.load_bookmarks()
        self.current_sort_column = None
        self.sort_reverse = False

        self.create_widgets()
        self.setup_bindings()
        self.start_worker()

        self.ensure_local_dir()
        self.refresh_local_list()
        self.monitor_running = False

        self.create_connection_indicator()
        self.create_search_bar()
        self.load_saved_data()

    def create_connection_indicator(self):
        self.status_canvas = tk.Canvas(self.root, width=20, height=20, highlightthickness=0)
        self.status_canvas.pack(side=tk.RIGHT, padx=5)
        self.status_indicator = self.status_canvas.create_oval(2, 2, 18, 18, fill="red")

    def update_status_indicator(self, connected):
        color = "green" if connected else "red"
        self.status_canvas.itemconfig(self.status_indicator, fill=color)

    def ensure_local_dir(self):
        if not os.path.exists(self.current_local_dir):
            os.makedirs(self.current_local_dir, exist_ok=True)
            self.update_status(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.current_local_dir}")

    def create_widgets(self):
        style = ttk.Style()
        style.configure("Treeview", rowheight=25)
        style.configure("Treeview.Heading", font=('Helvetica', 10, 'bold'))

        self.create_connection_panel()

        self.create_status_panel()

        self.create_file_panels()

        self.create_progress_bar()

        self.create_toolbar()

    def create_connection_panel(self):
        frame = ttk.LabelFrame(self.root, text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        frame.pack(fill=tk.X, padx=5, pady=5)

        entries = [
            ("–°–µ—Ä–≤–µ—Ä:", "host_entry", "localhost"),
            ("–ü–æ—Ä—Ç:", "port_entry", "21"),
            ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "user_entry", "user"),
        ]

        for i, (label, attr, default) in enumerate(entries):
            ttk.Label(frame, text=label).grid(row=i, column=0, padx=5, pady=2, sticky="e")
            entry = ttk.Entry(frame)
            entry.insert(0, default)
            entry.grid(row=i, column=1, padx=5, pady=2, sticky="ew")
            setattr(self, attr, entry)

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø–∞—Ä–æ–ª—è –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞
        pwd_frame = ttk.Frame(frame)
        pwd_frame.grid(row=3, column=1, padx=5, pady=2, sticky="ew")
        
        ttk.Label(frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=3, column=0, padx=5, pady=2, sticky="e")
        
        # –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
        self.password_entry = ttk.Entry(pwd_frame, show="*")
        self.password_entry.insert(0, "pass")
        self.password_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫–∞–∑–∞ –ø–∞—Ä–æ–ª—è
        self.show_password = tk.BooleanVar(value=False)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
        self.toggle_pwd_btn = ttk.Button(pwd_frame, text="üëÅ", width=3,
                                       command=self.toggle_password_visibility)
        self.toggle_pwd_btn.pack(side=tk.LEFT, padx=(2, 0))

        self.connect_btn = ttk.Button(frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", command=self.connect)
        self.connect_btn.grid(row=4, column=0, columnspan=2, pady=5)

    def create_status_panel(self):
        frame = ttk.Frame(self.root)
        frame.pack(fill=tk.X, padx=5, pady=2)

        self.local_path_var = tk.StringVar(value=f"–õ–æ–∫–∞–ª—å–Ω–∞—è: {self.current_local_dir}")
        self.remote_path_var = tk.StringVar(value="–£–¥–∞–ª—ë–Ω–Ω–∞—è: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")

        ttk.Label(frame, textvariable=self.local_path_var, anchor="w").pack(side="left", fill="x", expand=True)
        ttk.Label(frame, textvariable=self.remote_path_var, anchor="w").pack(side="right", fill="x", expand=True)

    def create_file_panels(self):
        """–ü–∞–Ω–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        local_frame = ttk.LabelFrame(main_frame, text="–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
        local_frame.pack(side="left", fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.local_tree = self.create_treeview(local_frame)

        # –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        remote_frame = ttk.LabelFrame(main_frame, text="–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        remote_frame.pack(side="right", fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.remote_tree = self.create_treeview(remote_frame)

    def create_treeview(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ Treeview —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        tree = ttk.Treeview(parent, columns=("name", "size", "type", "modified"), show="headings",
                            selectmode="extended")

        columns = [
            ("name", "–ò–º—è", 300),
            ("size", "–†–∞–∑–º–µ—Ä", 100),
            ("type", "–¢–∏–ø", 100),
            ("modified", "–ò–∑–º–µ–Ω—ë–Ω", 150)
        ]

        for col_id, heading, width in columns:
            tree.heading(col_id, text=heading)
            tree.column(col_id, width=width, anchor="w" if col_id == "name" else "center")

        scroll = ttk.Scrollbar(parent, orient="vertical", command=tree.yview)
        scroll.pack(side="right", fill="y")
        tree.configure(yscrollcommand=scroll.set)
        tree.pack(fill=tk.BOTH, expand=True)
        return tree

    def create_progress_bar(self):
        """–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.progress = ttk.Progressbar(self.root, orient="horizontal", mode="determinate", maximum=100)
        self.progress.pack(fill=tk.X, padx=5, pady=2)
        self.progress_label = ttk.Label(self.root, text="–ì–æ—Ç–æ–≤")
        self.progress_label.pack(fill=tk.X, padx=5)

    def create_toolbar(self):
        """–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        toolbar = ttk.Frame(self.root)
        toolbar.pack(fill=tk.X, padx=5, pady=5)

        buttons = [
            ("‚Üë –ù–∞–≤–µ—Ä—Ö", self.navigate_up),
            ("‚Üª –û–±–Ω–æ–≤–∏—Ç—å", self.refresh_lists),
            ("‚úö –ü–∞–ø–∫–∞", self.create_remote_dir),
            ("‚Üë –ó–∞–≥—Ä—É–∑–∏—Ç—å", self.upload_files),
            ("‚Üì –°–∫–∞—á–∞—Ç—å", self.download_files),
            ("‚úï –£–¥–∞–ª–∏—Ç—å", self.delete_selected),
            ("üîÑ –°–∏–Ω—Ö—Ä.", self.sync_folders),
            ("üìã –ò—Å—Ç–æ—Ä–∏—è", self.show_connection_history),
            ("‚≠ê –ó–∞–∫–ª–∞–¥–∫–∏", self.show_bookmarks),
            ("‚ûï –í –∑–∞–∫–ª–∞–¥–∫–∏", self.add_bookmark),
            ("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.show_settings)
        ]

        for text, command in buttons:
            ttk.Button(toolbar, text=text, command=command).pack(side="left", padx=2)

    def setup_bindings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        self.local_tree.bind("<Double-1>", self.on_local_double_click)
        self.remote_tree.bind("<Double-1>", self.on_remote_double_click)
        self.root.bind("<F5>", lambda e: self.refresh_lists())
        self.root.bind("<Delete>", lambda e: self.delete_selected())
        self.setup_context_menus()

    def setup_context_menus(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é"""
        # –õ–æ–∫–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        self.local_menu = tk.Menu(self.root, tearoff=0)
        self.local_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å", command=self.open_local_file)
        self.local_menu.add_command(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=self.rename_local)
        self.local_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_local)
        self.local_menu.add_separator()
        self.local_menu.add_command(label="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", command=self.create_local_dir)
        self.local_tree.bind("<Button-3>", self.show_local_menu)

        # –£–¥–∞–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        self.remote_menu = tk.Menu(self.root, tearoff=0)
        self.remote_menu.add_command(label="–°–∫–∞—á–∞—Ç—å", command=self.download_files)
        self.remote_menu.add_command(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=self.rename_remote)
        self.remote_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_remote)
        self.remote_menu.add_separator()
        self.remote_menu.add_command(label="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", command=self.create_remote_dir)
        self.remote_tree.bind("<Button-3>", self.show_remote_menu)

    def start_worker(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""

        def worker():
            while self.running:
                task = self.task_queue.get()
                if task is None: break
                try:
                    task()
                except Exception as e:
                    self.update_status(f"–û—à–∏–±–∫–∞: {e}", error=True)
                self.task_queue.task_done()

        self.worker_thread = Thread(target=worker, daemon=True)
        self.worker_thread.start()

    def start_connection_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
        
        def monitor():
            check_interval = 30  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            consecutive_failures = 0
            max_interval = 120   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            min_interval = 10    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            
            while self.monitor_running:
                try:
                    with self.ftp_lock:
                        if self.ftp:
                            start_time = time.time()
                            self.ftp.voidcmd('NOOP')
                            response_time = time.time() - start_time
                            
                            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
                            if response_time < 0.1:  # –•–æ—Ä–æ—à–∏–π –æ—Ç–∫–ª–∏–∫
                                check_interval = min(check_interval * 1.5, max_interval)
                            else:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫
                                check_interval = max(check_interval * 0.75, min_interval)
                                
                            consecutive_failures = 0
                            self.root.after(0, self.update_status_indicator, True)
                            
                except:
                    consecutive_failures += 1
                    check_interval = max(check_interval * 0.5, min_interval)
                    
                    if consecutive_failures >= 3:
                        self.root.after(0, self.handle_connection_loss)
                        break
                        
                time.sleep(check_interval)

        Thread(target=monitor, daemon=True).start()

    def connect(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SSL/TLS"""
        host = self.host_entry.get()
        port = int(self.port_entry.get())
        user = self.user_entry.get()
        password = self.password_entry.get()
        use_tls = True  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ–∫–±–æ–∫—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

        def connect_task():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                result = sock.connect_ex((host, port))
                sock.close()
                if result != 0:
                    error_msg = f"–°–µ—Ä–≤–µ—Ä {host}:{port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    self.root.after(0, lambda msg=error_msg: messagebox.showerror("–û—à–∏–±–∫–∞", msg))
                    return

                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ FTP
                with self.ftp_lock:
                    if self.ftp:
                        self.ftp.quit()
                    self.ftp = FTP()
                    self.ftp.connect(host, port, timeout=10)
                    self.ftp.login(user=user, passwd=password)
                    self.monitor_running = True
                    self.start_connection_monitor()

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self.add_to_history(host, port, user)

                    self.root.after(0, lambda: [
                        self.update_status_indicator(True),
                        self.connect_btn.config(text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", command=self.disconnect),
                        self.refresh_remote_list()
                    ])
            except Exception as e:
                error_msg = str(e)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                self.root.after(0, lambda msg=error_msg: [  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –ª—è–º–±–¥—ã
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {msg}"),
                    self.update_status_indicator(False)
                ])

        self.task_queue.put(connect_task)

    def upload_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.ftp:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        selected = self.local_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return

        def upload_task():
            total = len(selected)
            success = 0
            buffer_size = 8192  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            
            for i, item_id in enumerate(selected):
                values = self.local_tree.item(item_id)['values']
                filename = values[0]
                is_folder = values[2] == "–ü–∞–ø–∫–∞"
                filepath = os.path.join(self.current_local_dir, filename)

                try:
                    if is_folder:
                        self.upload_folder(filepath, filename)
                        success += 1
                        continue

                    self.root.after(0, lambda f=filename: [
                        self.progress_label.config(text=f"–ó–∞–≥—Ä—É–∑–∫–∞ {i + 1}/{total}: {f}"),
                        self.progress.config(value=(i / total) * 100)
                    ])
                    
                    # –ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    with open(filepath, 'rb') as f:
                        def callback(data):
                            f.seek(len(data), 1)
                            self.progress.config(
                                value=((i + (f.tell() / os.path.getsize(filepath))) / total) * 100
                            )
                        
                        self.ftp.storbinary(f"STOR {filename}", f, buffer_size, callback)
                    success += 1
                    
                except Exception as e:
                    self.root.after(0, lambda f=filename, e—Ö=e: [
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {f}: {e—Ö}"),
                        self.update_status(f"–û—à–∏–±–∫–∞: {f}", error=True)
                    ])
                
            self.root.after(0, lambda: [
                self.progress.config(value=100),
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {success}/{total} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫"),
                self.refresh_remote_list()
            ])

        self.task_queue.put(upload_task)

    def upload_folder(self, local_path, remote_folder):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        # –°–æ–∑–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        try:
            self.ftp.mkd(remote_folder)
        except:
            pass  # –ü–∞–ø–∫–∞ –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        current_remote = self.ftp.pwd()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
        self.ftp.cwd(remote_folder)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
        for item in os.listdir(local_path):
            local_item_path = os.path.join(local_path, item)
            
            if os.path.isfile(local_item_path):
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                with open(local_item_path, 'rb') as f:
                    self.ftp.storbinary(f'STOR {item}', f)
            elif os.path.isdir(local_item_path):
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                self.upload_folder(local_item_path, item)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self.ftp.cwd(current_remote)

    def handle_connection_loss(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.update_status_indicator(False)
        messagebox.showwarning("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "–°–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–∞")
        self.disconnect()

    def disconnect(self):
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
        self.monitor_running = False

        def disconnect_task():
            with self.ftp_lock:
                if self.ftp:
                    try:
                        self.ftp.quit()
                    except:
                        pass
                    finally:
                        self.ftp = None
            self.root.after(0, lambda: [
                self.connect_btn.config(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", command=self.connect),
                self.update_status_indicator(False)
            ])

        self.task_queue.put(disconnect_task)

    def refresh_lists(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ–∞–π–ª–æ–≤"""
        self.refresh_local_list()
        if self.ftp: self.refresh_remote_list()

    def refresh_local_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""

        def refresh_task():
            try:
                items = []
                for item in os.listdir(self.current_local_dir):
                    path = os.path.join(self.current_local_dir, item)
                    stat = os.stat(path)
                    size = humanize.naturalsize(stat.st_size) if os.path.isfile(path) else ""
                    modified = datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M")
                    items.append((item, size, "–ü–∞–ø–∫–∞" if os.path.isdir(path) else "–§–∞–π–ª", modified))

                self.root.after(0, lambda: (
                    self.local_tree.delete(*self.local_tree.get_children()),
                    [self.local_tree.insert("", tk.END, values=item) for item in items],
                    self.local_path_var.set(f"–õ–æ–∫–∞–ª—å–Ω–∞—è: {self.current_local_dir}")
                ))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"))

        self.task_queue.put(refresh_task)

    def refresh_remote_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
        
        def refresh_task():
            cached_list = self.get_cached_remote_list()
            if cached_list:
                self.root.after(0, lambda: (
                    self.remote_tree.delete(*self.remote_tree.get_children()),
                    [self.remote_tree.insert("", tk.END, values=item) for item in cached_list],
                    self.remote_path_var.set(f"–£–¥–∞–ª—ë–Ω–Ω–∞—è: {self.ftp.pwd()}")
                ))
                return

            with self.ftp_lock:
                try:
                    files = []
                    self.ftp.retrlines('LIST', files.append)
                    parsed = []
                    for line in files:
                        parts = line.split()
                        if len(parts) < 9: continue
                        name = ' '.join(parts[8:])
                        size = humanize.naturalsize(int(parts[4])) if parts[0].startswith('-') else ""
                        file_type = "–ü–∞–ø–∫–∞" if parts[0].startswith('d') else "–§–∞–π–ª"
                        modified = ' '.join(parts[5:8])
                        
                        parsed.append((name, size, file_type, modified))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    self.remote_cache[self.ftp.pwd()] = (time.time(), parsed)
                    
                    self.root.after(0, lambda: (
                        self.remote_tree.delete(*self.remote_tree.get_children()),
                        [self.remote_tree.insert("", tk.END, values=item) for item in parsed],
                        self.remote_path_var.set(f"–£–¥–∞–ª—ë–Ω–Ω–∞—è: {self.ftp.pwd()}")
                    ))
                except Exception as e:
                    self.root.after(0, lambda: [
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"),
                        self.update_status(f"–û—à–∏–±–∫–∞: {e}", error=True)
                    ])

        self.task_queue.put(refresh_task)

    def download_files(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        if not self.ftp:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        selected = self.remote_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return

        dest_dir = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if not dest_dir: return

        def download_task():
            total = len(selected)
            success = 0
            for i, item_id in enumerate(selected):
                filename = self.remote_tree.item(item_id, 'values')[0]
                dest = os.path.join(dest_dir, filename)
                try:
                    self.root.after(0, lambda f=filename: [
                        self.progress_label.config(text=f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {i + 1}/{total}: {f}"),
                        self.progress.config(value=(i / total) * 100)
                    ])
                    with open(dest, 'wb') as f:
                        self.ftp.retrbinary(f"RETR {filename}", f.write)
                    success += 1
                except Exception as e:
                    self.root.after(0, lambda f=filename, e—Ö=e: [
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {f}: {e—Ö}"),
                        self.update_status(f"–û—à–∏–±–∫–∞: {f}", error=True)
                    ])
            self.root.after(0, lambda: [
                self.progress.config(value=100),
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {success}/{total} —Ñ–∞–π–ª–æ–≤"),
                self.refresh_local_list()
            ])

        self.task_queue.put(download_task)

    def delete_selected(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        if not self.ftp:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        selected = self.remote_tree.selection()
        if not selected: return

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å {len(selected)} —Ñ–∞–π–ª–æ–≤?"): return

        def delete_task():
            total = len(selected)
            success = 0
            for i, item_id in enumerate(selected):
                filename = self.remote_tree.item(item_id, 'values')[0]
                try:
                    is_dir = False
                    try:
                        self.ftp.cwd(filename)
                        self.ftp.cwd('..')
                        is_dir = True
                    except:
                        pass

                    if is_dir:
                        self.ftp.rmd(filename)
                    else:
                        self.ftp.delete(filename)
                    success += 1
                except Exception as e:
                    self.root.after(0, lambda f=filename, e—Ö=e: [
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {f}: {e—Ö}"),
                        self.update_status(f"–û—à–∏–±–∫–∞: {f}", error=True)
                    ])
            self.root.after(0, lambda: [
                self.progress.config(value=100),
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–£–¥–∞–ª–µ–Ω–æ {success}/{total} —Ñ–∞–π–ª–æ–≤"),
                self.refresh_remote_list()
            ])

        self.task_queue.put(delete_task)

    def create_remote_dir(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        if not self.ftp: return
        dirname = simpledialog.askstring("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏:")
        if not dirname: return

        def create_task():
            try:
                self.ftp.mkd(dirname)
                self.root.after(0, lambda: [
                    self.refresh_remote_list(),
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–∞–ø–∫–∞ '{dirname}' —Å–æ–∑–¥–∞–Ω–∞")
                ])
            except Exception as e:
                self.root.after(0, lambda: [
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}"),
                    self.update_status(f"–û—à–∏–±–∫–∞: {e}", error=True)
                ])

        self.task_queue.put(create_task)

    def update_status(self, message, error=False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.progress_label.config(
            text=message,
            foreground="red" if error else "black"
        )

    def navigate_up(self):
        if self.ftp:
            self.task_queue.put(lambda: [
                self.ftp.cwd('..'),
                self.refresh_remote_list()
            ])

    def on_local_double_click(self, event):
        item = self.local_tree.selection()[0]
        name = self.local_tree.item(item, 'values')[0]
        path = os.path.join(self.current_local_dir, name)
        if os.path.isdir(path):
            self.current_local_dir = path
            self.refresh_local_list()

    def on_remote_double_click(self, event):
        item = self.remote_tree.selection()[0]
        name = self.remote_tree.item(item, 'values')[0]
        self.task_queue.put(lambda: [
            self.ftp.cwd(name),
            self.refresh_remote_list()
        ])

    def show_local_menu(self, event):
        item = self.local_tree.identify_row(event.y)
        if item:
            self.local_tree.selection_set(item)
            self.local_menu.post(event.x_root, event.y_root)

    def show_remote_menu(self, event):
        item = self.remote_tree.identify_row(event.y)
        if item:
            self.remote_tree.selection_set(item)
            self.remote_menu.post(event.x_root, event.y_root)

    def __del__(self):
        self.running = False
        self.task_queue.put(None)
        if self.ftp:
            try:
                self.ftp.quit()
            except:
                pass

    def sync_folders(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        if not self.ftp:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        dialog = tk.Toplevel(self.root)
        dialog.title("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
        dialog.geometry("400x170")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º –∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        dialog.geometry("+%d+%d" % (
            self.root.winfo_rootx() + self.root.winfo_width()//2 - 200,
            self.root.winfo_rooty() + self.root.winfo_height()//2 - 75
        ))

        ttk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:",
                 wraplength=380, justify="center").pack(pady=10)

        self.sync_cancelled = False
        
        def start_sync(direction):
            dialog.destroy()
            self.do_sync(direction)
            
        def cancel():
            self.sync_cancelled = True
            dialog.destroy()

        btn_frame = ttk.Frame(dialog)
        btn_frame.pack(fill=tk.X, padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∞ 1 - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ —à–∏—Ä–∏–Ω–µ
        ttk.Button(btn_frame, text="1. –õ–æ–∫–∞–ª—å–Ω—ã–µ ‚Üí –£–¥–∞–ª–µ–Ω–Ω—ã–µ",
                   command=lambda: start_sync("to_remote")).pack(fill=tk.X, padx=5, pady=2)

        # –ö–Ω–æ–ø–∫–∞ 2 - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ —à–∏—Ä–∏–Ω–µ
        ttk.Button(btn_frame, text="2. –£–¥–∞–ª–µ–Ω–Ω—ã–µ ‚Üí –õ–æ–∫–∞–ª—å–Ω—ã–µ",
                   command=lambda: start_sync("to_local")).pack(fill=tk.X, padx=5, pady=2)

        # –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞ - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ —à–∏—Ä–∏–Ω–µ
        ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                   command=cancel).pack(fill=tk.X, padx=5, pady=2)

    def do_sync(self, direction):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        def sync_task():
            try:
                if direction == "to_remote":  # –õ–æ–∫–∞–ª—å–Ω–∞—è ‚Üí –£–¥–∞–ª–µ–Ω–Ω–∞—è
                    self.sync_to_remote()
                else:  # –£–¥–∞–ª–µ–Ω–Ω–∞—è ‚Üí –õ–æ–∫–∞–ª—å–Ω–∞—è
                    self.sync_to_local()
            except Exception as e:
                self.root.after(0, lambda: [
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"),
                    self.update_status(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", error=True)
                ])

        self.task_queue.put(sync_task)

    def sync_to_remote(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—É—é"""
        local_items = self.get_local_files()
        total_items = len(local_items)
        processed = 0

        for item in local_items:
            if self.sync_cancelled:
                self.update_status("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return

            name, _, type_, _ = item
            local_path = os.path.join(self.current_local_dir, name)
            
            self.root.after(0, lambda n=name, p=processed, t=total_items: [
                self.progress_label.config(text=f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {p+1}/{t}: {n}"),
                self.progress.config(value=(p/t) * 100)
            ])

            if type_ == "–ü–∞–ø–∫–∞":
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                try:
                    self.ftp.mkd(name)
                except error_perm:
                    pass  # –ü–∞–ø–∫–∞ –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å

                current_remote = self.ftp.pwd()
                self.ftp.cwd(name)
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
                for root, dirs, files in os.walk(local_path):
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                    rel_path = os.path.relpath(root, local_path)
                    if rel_path != '.':
                        try:
                            self.ftp.mkd(rel_path)
                        except error_perm:
                            pass
                        self.ftp.cwd(rel_path)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
                    for file in files:
                        with open(os.path.join(root, file), 'rb') as f:
                            self.ftp.storbinary(f'STOR {file}', f)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
                    if rel_path != '.':
                        self.ftp.cwd('/' + current_remote + '/' + name)
                
                self.ftp.cwd(current_remote)
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                with open(local_path, 'rb') as f:
                    self.ftp.storbinary(f'STOR {name}', f)
            
            processed += 1

        if not self.sync_cancelled:
            self.root.after(0, lambda: [
                self.progress.config(value=100),
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
                self.refresh_remote_list()
            ])

    def sync_to_local(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é"""
        remote_items = self.get_remote_files()
        total_items = len(remote_items)
        processed = 0

        for item in remote_items:
            if self.sync_cancelled:
                self.update_status("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return

            name, _, type_, _ = item
            local_path = os.path.join(self.current_local_dir, name)
            
            self.root.after(0, lambda n=name, p=processed, t=total_items: [
                self.progress_label.config(text=f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {p+1}/{t}: {n}"),
                self.progress.config(value=(p/t) * 100)
            ])

            if type_ == "–ü–∞–ø–∫–∞":
                # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
                os.makedirs(local_path, exist_ok=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                current_remote = self.ftp.pwd()
                
                try:
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                    self.ftp.cwd(name)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
                    folder_items = []
                    self.ftp.retrlines('LIST', folder_items.append)
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    for item_info in folder_items:
                        parts = item_info.split()
                        if len(parts) < 9:
                            continue
                            
                        item_name = ' '.join(parts[8:])
                        is_dir = parts[0].startswith('d')
                        
                        if is_dir:
                            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
                            subdir_path = os.path.join(local_path, item_name)
                            os.makedirs(subdir_path, exist_ok=True)
                            
                            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∞–ø–∫—É
                            current_path = self.ftp.pwd()
                            self.ftp.cwd(item_name)
                            self.sync_directory_to_local(subdir_path)
                            self.ftp.cwd(current_path)
                        else:
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                            with open(os.path.join(local_path, item_name), 'wb') as f:
                                self.ftp.retrbinary(f'RETR {item_name}', f.write)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    self.ftp.cwd(current_remote)
                    
                except Exception as e:
                    self.update_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–∫–∏ {name}: {str(e)}", error=True)
            else:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                with open(local_path, 'wb') as f:
                    self.ftp.retrbinary(f'RETR {name}', f.write)
            
            processed += 1

        if not self.sync_cancelled:
            self.root.after(0, lambda: [
                self.progress.config(value=100),
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
                self.refresh_local_list()
            ])

    def sync_directory_to_local(self, local_path):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–æ–∫"""
        items = []
        self.ftp.retrlines('LIST', items.append)
        
        for item_info in items:
            parts = item_info.split()
            if len(parts) < 9:
                continue
                
            name = ' '.join(parts[8:])
            is_dir = parts[0].startswith('d')
            
            if is_dir:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É
                subdir_path = os.path.join(local_path, name)
                os.makedirs(subdir_path, exist_ok=True)
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∞–ø–∫—É
                current_path = self.ftp.pwd()
                self.ftp.cwd(name)
                self.sync_directory_to_local(subdir_path)
                self.ftp.cwd(current_path)
            else:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                with open(os.path.join(local_path, name), 'wb') as f:
                    self.ftp.retrbinary(f'RETR {name}', f.write)

    def show_settings(self):
        """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_window.geometry("300x200")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        ttk.Label(settings_window, text="–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:").pack(pady=5)
        dir_frame = ttk.Frame(settings_window)
        dir_frame.pack(fill=tk.X, padx=5)

        self.local_dir_entry = ttk.Entry(dir_frame)
        self.local_dir_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.local_dir_entry.insert(0, self.current_local_dir)

        ttk.Button(
            dir_frame,
            text="–ò–∑–º–µ–Ω–∏—Ç—å",
            command=self.change_local_directory
        ).pack(side=tk.RIGHT)

    def change_local_directory(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        new_dir = filedialog.askdirectory(initialdir=self.current_local_dir)
        if new_dir:
            self.current_local_dir = new_dir
            self.local_path_var.set(f"–õ–æ–∫–∞–ª—å–Ω–∞—è: {self.current_local_dir}")
            self.refresh_local_list()

    def create_local_dir(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏"""
        dirname = simpledialog.askstring("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏:")
        if dirname:
            try:
                new_dir = os.path.join(self.current_local_dir, dirname)
                os.makedirs(new_dir, exist_ok=True)
                self.refresh_local_list()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {str(e)}")

    def open_local_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        selected = self.local_tree.selection()
        if selected:
            filename = self.local_tree.item(selected[0], 'values')[0]
            full_path = os.path.join(self.current_local_dir, filename)
            if os.path.isfile(full_path):
                try:
                    os.startfile(full_path)
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {str(e)}")

    def rename_local(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        selected = self.local_tree.selection()
        if selected:
            old_name = self.local_tree.item(selected[0], 'values')[0]
            new_name = simpledialog.askstring(
                "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
                initialvalue=old_name
            )
            if new_name and new_name != old_name:
                try:
                    src = os.path.join(self.current_local_dir, old_name)
                    dst = os.path.join(self.current_local_dir, new_name)
                    os.rename(src, dst)
                    self.refresh_local_list()
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {str(e)}")

    def delete_local(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        selected = self.local_tree.selection()
        if selected:
            filename = self.local_tree.item(selected[0], 'values')[0]
            path = os.path.join(self.current_local_dir, filename)

            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å {filename}?"):
                try:
                    if os.path.isdir(path):
                        os.rmdir(path)
                    else:
                        os.remove(path)
                    self.refresh_local_list()
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {str(e)}")

    def rename_remote(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        if not self.ftp:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        selected = self.remote_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
            return

        old_name = self.remote_tree.item(selected[0], 'values')[0]
        new_name = simpledialog.askstring(
            "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
            initialvalue=old_name
        )

        if new_name and new_name != old_name:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º FTP –∫–æ–º–∞–Ω–¥—ã RNFR –∏ RNTO
                self.ftp.rename(old_name, new_name)
                self.refresh_remote_list()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω")
            except error_perm as e:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                     f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {str(e)}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                     f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {str(e)}")

    def delete_remote(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        if not self.ftp:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return

        selected = self.remote_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        filename = self.remote_tree.item(selected[0], 'values')[0]

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å {filename}?"):
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            is_dir = False
            try:
                self.ftp.cwd(filename)
                is_dir = True
                self.ftp.cwd('..')
            except:
                pass

            if is_dir:
                self.ftp.rmd(filename)
            else:
                self.ftp.delete(filename)

            self.refresh_remote_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

        except error_perm as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {str(e)}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

    def get_cached_remote_list(self):
        current_path = self.ftp.pwd()
        current_time = time.time()
        
        if (current_path in self.remote_cache and 
            current_time - self.remote_cache[current_path][0] < self.cache_ttl):
            return self.remote_cache[current_path][1]
            
        return None

    def create_search_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞"""
        search_frame = ttk.LabelFrame(self.root, text="–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤")
        search_frame.pack(fill=tk.X, padx=5, pady=2)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        input_frame = ttk.Frame(search_frame)
        input_frame.pack(fill=tk.X, padx=5, pady=2)

        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.on_search_change)
        
        self.search_entry = ttk.Entry(input_frame, textvariable=self.search_var)
        self.search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        ttk.Button(input_frame, text="‚úï", width=3,
                  command=self.clear_search).pack(side=tk.LEFT, padx=2)

        # –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        options_frame = ttk.Frame(search_frame)
        options_frame.pack(fill=tk.X, padx=5, pady=2)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
        self.search_scope = tk.StringVar(value="both")
        ttk.Radiobutton(options_frame, text="–õ–æ–∫–∞–ª—å–Ω—ã–µ", 
                       variable=self.search_scope, 
                       value="local",
                       command=self.on_search_change).pack(side=tk.LEFT, padx=5)
        ttk.Radiobutton(options_frame, text="–£–¥–∞–ª–µ–Ω–Ω—ã–µ", 
                       variable=self.search_scope, 
                       value="remote",
                       command=self.on_search_change).pack(side=tk.LEFT, padx=5)
        ttk.Radiobutton(options_frame, text="–í–µ–∑–¥–µ", 
                       variable=self.search_scope, 
                       value="both",
                       command=self.on_search_change).pack(side=tk.LEFT, padx=5)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        self.case_sensitive = tk.BooleanVar(value=False)
        ttk.Checkbutton(options_frame, text="–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä",
                       variable=self.case_sensitive,
                       command=self.on_search_change).pack(side=tk.LEFT, padx=5)

        self.search_in_folders = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–ò—Å–∫–∞—Ç—å –≤ –ø–∞–ø–∫–∞—Ö",
                       variable=self.search_in_folders,
                       command=self.on_search_change).pack(side=tk.LEFT, padx=5)

    def clear_search(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        self.search_var.set("")
        self.refresh_lists()

    def filter_items(self, items, search_text):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞"""
        filtered = []
        if not search_text:
            return items

        for item in items:
            name = item[0]
            is_folder = item[2] == "–ü–∞–ø–∫–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            if not self.case_sensitive.get():
                name = name.lower()
                search_text = search_text.lower()

            # –í—Å–µ–≥–¥–∞ –∏—â–µ–º –∏ –≤ —Ñ–∞–π–ª–∞—Ö, –∏ –≤ –ø–∞–ø–∫–∞—Ö
            if search_text in name:
                filtered.append(item)
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞ –∏ –æ–ø—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–ø–∫–∞—Ö –≤–∫–ª—é—á–µ–Ω–∞,
            # –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∏—Å–∫—É
            elif is_folder and self.search_in_folders.get():
                filtered.append(item)

        return filtered

    def get_local_files(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        items = []
        try:
            for item in os.listdir(self.current_local_dir):
                path = os.path.join(self.current_local_dir, item)
                try:
                    stat = os.stat(path)
                    is_dir = os.path.isdir(path)
                    # –î–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä, –¥–ª—è –ø–∞–ø–æ–∫ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏
                    if is_dir:
                        try:
                            size = f"{len(os.listdir(path))} —ç–ª–µ–º."
                        except:
                            size = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
                    else:
                        size = humanize.naturalsize(stat.st_size)
                    
                    modified = datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M")
                    items.append((item, size, "–ü–∞–ø–∫–∞" if is_dir else "–§–∞–π–ª", modified))
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ, –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    items.append((item, "–û—à–∏–±–∫–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", ""))
        except Exception as e:
            self.update_status(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}", error=True)
        return items

    def get_remote_files(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        items = []
        if not self.ftp:
            return items

        try:
            with self.ftp_lock:
                files = []
                self.ftp.retrlines('LIST', files.append)
                
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                for line in files:
                    try:
                        parts = line.split()
                        if len(parts) < 9:
                            continue
                        name = ' '.join(parts[8:])
                        is_dir = parts[0].startswith('d')
                        
                        # –î–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                        if not is_dir:
                            try:
                                size = humanize.naturalsize(int(parts[4]))
                            except:
                                size = parts[4]
                        else:
                            # –î–ª—è –ø–∞–ø–æ–∫ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            try:
                                current_dir = self.ftp.pwd()
                                self.ftp.cwd(name)
                                dir_files = []
                                self.ftp.retrlines('LIST', dir_files.append)
                                size = f"{len(dir_files)} —ç–ª–µ–º."
                                self.ftp.cwd(current_dir)
                            except:
                                size = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
                                
                        modified = ' '.join(parts[5:8])
                        items.append((name, size, "–ü–∞–ø–∫–∞" if is_dir else "–§–∞–π–ª", modified))
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
                        continue
        except Exception as e:
            self.update_status(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}", error=True)
        return items

    def on_search_change(self, *args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        search_text = self.search_var.get()
        scope = self.search_scope.get()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
        if scope in ["local", "both"]:
            items = self.get_local_files()
            filtered_items = self.filter_items(items, search_text)
            self.local_tree.delete(*self.local_tree.get_children())
            for item in filtered_items:
                self.local_tree.insert("", tk.END, values=item)

        # –û–±–Ω–æ–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
        if scope in ["remote", "both"] and self.ftp:
            items = self.get_remote_files()
            filtered_items = self.filter_items(items, search_text)
            self.remote_tree.delete(*self.remote_tree.get_children())
            for item in filtered_items:
                self.remote_tree.insert("", tk.END, values=item)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        total_found = len(self.local_tree.get_children()) + len(self.remote_tree.get_children())
        if search_text:
            self.update_status(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_found}")
        else:
            self.update_status("–ì–æ—Ç–æ–≤")

    def setup_sorting(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º"""
        for tree in (self.local_tree, self.remote_tree):
            for col in ("name", "size", "type", "modified"):
                tree.heading(col, command=lambda c=col: self.sort_tree_column(tree, c))

    def sort_tree_column(self, tree, col):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–µ—Ä–µ–≤–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ"""
        items = [(tree.set(item, col), item) for item in tree.get_children('')]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if self.current_sort_column == col:
            self.sort_reverse = not self.sort_reverse
        else:
            self.sort_reverse = False
        self.current_sort_column = col
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        items.sort(reverse=self.sort_reverse)
        for index, (_, item) in enumerate(items):
            tree.move(item, '', index)

    def load_connection_history(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            if os.path.exists(self.connection_history_file):
                with open(self.connection_history_file, 'r') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

    def save_connection_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            with open(self.connection_history_file, 'w') as f:
                json.dump(self.connection_history, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def add_to_history(self, host: str, port: int, user: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        connection = {
            'host': host,
            'port': port,
            'user': user,
            'timestamp': datetime.now().isoformat()
        }
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        self.connection_history = [
            c for c in self.connection_history 
            if not (c['host'] == host and c['port'] == port and c['user'] == user)
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        self.connection_history.insert(0, connection)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        self.connection_history = self.connection_history[:10]
        self.save_connection_history()

    def show_connection_history(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        history_window = tk.Toplevel(self.root)
        history_window.title("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        history_window.geometry("800x300")

        tree = ttk.Treeview(history_window, columns=("host", "port", "user", "date"), show="headings")
        tree.heading("host", text="–°–µ—Ä–≤–µ—Ä")
        tree.heading("port", text="–ü–æ—Ä—Ç")
        tree.heading("user", text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        tree.heading("date", text="–î–∞—Ç–∞")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        tree.column("host", width=250)
        tree.column("port", width=100)
        tree.column("user", width=200)
        tree.column("date", width=200)

        for conn in self.connection_history:
            date = datetime.fromisoformat(conn['timestamp']).strftime("%Y-%m-%d %H:%M")
            tree.insert("", tk.END, values=(
                conn['host'],
                conn['port'],
                conn['user'],
                date
            ))

        tree.bind("<Double-1>", lambda e: self.connect_from_history(tree))
        tree.pack(fill=tk.BOTH, expand=True)

    def connect_from_history(self, tree):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        selected = tree.selection()
        if not selected:
            return
            
        item = tree.item(selected[0])
        values = item['values']
        
        self.host_entry.delete(0, tk.END)
        self.host_entry.insert(0, values[0])
        
        self.port_entry.delete(0, tk.END)
        self.port_entry.insert(0, values[1])
        
        self.user_entry.delete(0, tk.END)
        self.user_entry.insert(0, values[2])
        
        self.connect()

    def setup_drag_and_drop(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag-and-drop"""
        self.local_tree.bind("<ButtonPress-1>", self.on_drag_start)
        self.local_tree.bind("<B1-Motion>", self.on_drag_motion)
        self.local_tree.bind("<ButtonRelease-1>", self.on_drag_end)
        
        self.remote_tree.bind("<ButtonPress-1>", self.on_drag_start)
        self.remote_tree.bind("<B1-Motion>", self.on_drag_motion)
        self.remote_tree.bind("<ButtonRelease-1>", self.on_drag_end)

    def on_drag_start(self, event):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        tree = event.widget
        item = tree.identify_row(event.y)
        if item:
            tree.selection_set(item)
            self._drag_data = {'item': item, 'source': tree}

    def on_drag_motion(self, event):
        """–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        pass  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

    def on_drag_end(self, event):
        """–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if hasattr(self, '_drag_data'):
            target = event.widget
            if target != self._drag_data['source']:
                # –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –¥–µ—Ä–µ–≤—å—è–º–∏
                if target == self.remote_tree:
                    self.upload_files()
                else:
                    self.download_files()
            del self._drag_data

    def load_bookmarks(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫"""
        try:
            if os.path.exists(self.bookmarks_file):
                with open(self.bookmarks_file, 'r') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫: {e}")
        return []

    def save_bookmarks(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–æ–∫"""
        try:
            with open(self.bookmarks_file, 'w') as f:
                json.dump(self.bookmarks, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–æ–∫: {e}")

    def add_bookmark(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏"""
        if not self.ftp:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        name = simpledialog.askstring("–ó–∞–∫–ª–∞–¥–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏:")
        if name:
            bookmark = {
                'name': name,
                'host': self.host_entry.get(),
                'port': int(self.port_entry.get()),
                'user': self.user_entry.get(),
                'password': self.password_entry.get()  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            }
            self.bookmarks.append(bookmark)
            self.save_bookmarks()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    def show_bookmarks(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –∑–∞–∫–ª–∞–¥–æ–∫"""
        bookmarks_window = tk.Toplevel(self.root)
        bookmarks_window.title("–ó–∞–∫–ª–∞–¥–∫–∏")
        bookmarks_window.geometry("800x300")

        tree = ttk.Treeview(bookmarks_window, columns=("name", "host", "port", "user"), show="headings")
        tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        tree.heading("host", text="–°–µ—Ä–≤–µ—Ä")
        tree.heading("port", text="–ü–æ—Ä—Ç")
        tree.heading("user", text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        tree.column("name", width=200)
        tree.column("host", width=250)
        tree.column("port", width=100)
        tree.column("user", width=200)

        for bookmark in self.bookmarks:
            tree.insert("", tk.END, values=(
                bookmark['name'],
                bookmark['host'],
                bookmark['port'],
                bookmark['user']
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∞–º–∏
        btn_frame = ttk.Frame(bookmarks_window)
        btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(btn_frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", 
                   command=lambda: self.connect_from_bookmark(tree)).pack(side=tk.LEFT, padx=2)
        ttk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", 
                   command=lambda: self.delete_bookmark(tree)).pack(side=tk.LEFT, padx=2)

        tree.pack(fill=tk.BOTH, expand=True)

    def connect_from_bookmark(self, tree):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∑–∞–∫–ª–∞–¥–∫–∏"""
        selected = tree.selection()
        if not selected:
            return
            
        item = tree.item(selected[0])
        name = item['values'][0]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
        
        # –ò—â–µ–º –∑–∞–∫–ª–∞–¥–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        bookmark = next((b for b in self.bookmarks if b['name'] == name), None)
        if not bookmark:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.host_entry.delete(0, tk.END)
        self.host_entry.insert(0, bookmark['host'])
        
        self.port_entry.delete(0, tk.END)
        self.port_entry.insert(0, str(bookmark['port']))
        
        self.user_entry.delete(0, tk.END)
        self.user_entry.insert(0, bookmark['user'])
        
        self.password_entry.delete(0, tk.END)
        self.password_entry.insert(0, bookmark.get('password', ''))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        
        self.connect()

    def delete_bookmark(self, tree):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏"""
        selected = tree.selection()
        if not selected:
            return
            
        item = tree.item(selected[0])
        name = item['values'][0]
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É '{name}'?"):
            self.bookmarks = [b for b in self.bookmarks if b['name'] != name]
            self.save_bookmarks()
            tree.delete(selected)

    def load_saved_data(self):
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        pass

    def toggle_password_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        if self.show_password.get():
            self.password_entry.configure(show="*")
            self.show_password.set(False)
        else:
            self.password_entry.configure(show="")
            self.show_password.set(True)

if __name__ == "__main__":
    root = tk.Tk()
    app = FTPClientApp(root)
    root.mainloop()