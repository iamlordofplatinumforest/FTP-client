"""
–í–∏–¥–∂–µ—Ç—ã –¥–ª—è GUI
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from typing import Callable, Optional, List, Tuple, Dict, Any
from datetime import datetime


class FileListView(ttk.Treeview):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    def __init__(self, parent, **kwargs):
        super().__init__(parent, 
                        columns=("name", "size", "type", "modified"),
                        show="headings",
                        selectmode="extended",
                        **kwargs)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.heading("name", text="–ò–º—è")
        self.heading("size", text="–†–∞–∑–º–µ—Ä")
        self.heading("type", text="–¢–∏–ø")
        self.heading("modified", text="–ò–∑–º–µ–Ω—ë–Ω")
        
        self.column("name", width=300)
        self.column("size", width=100)
        self.column("type", width=100)
        self.column("modified", width=150)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        self.scrollbar = ttk.Scrollbar(parent, orient="vertical", command=self.yview)
        self.configure(yscrollcommand=self.scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.current_sort = None
        self.reverse_sort = False

    def set_items(self, items: List[Any]) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        self.delete(*self.get_children())
        for item in items:
            if isinstance(item, dict):
                values = (
                    item['name'],
                    item.get('size_human', ''),
                    item['type'],
                    item['modified'].strftime('%Y-%m-%d %H:%M:%S') if isinstance(item['modified'], datetime) else item['modified']
                )
            else:  # –µ—Å–ª–∏ item —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂
                values = item
            self.insert("", "end", values=values)

    def _sort_by_column(self, column: str) -> None:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ"""
        items = [(self.set(item, column), item) for item in self.get_children('')]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if self.current_sort == column:
            self.reverse_sort = not self.reverse_sort
        else:
            self.reverse_sort = False
        self.current_sort = column
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        items.sort(reverse=self.reverse_sort)
        for index, (_, item) in enumerate(items):
            self.move(item, '', index)


class StatusBar(ttk.Frame):
    """–°—Ç–∞—Ç—É—Å –±–∞—Ä"""
    def __init__(self, parent, **kwargs):
        super().__init__(parent, style='Statusbar.TFrame', **kwargs)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        status_frame = ttk.Frame(self, style='Statusbar.TFrame')
        status_frame.pack(side="left", fill="x", expand=True, padx=5, pady=2)
        
        self.status_label = ttk.Label(status_frame,
                                    text="–ì–æ—Ç–æ–≤",
                                    style='Statusbar.TLabel')
        self.status_label.pack(side="left", fill="x", expand=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        progress_frame = ttk.Frame(self, style='Statusbar.TFrame')
        progress_frame.pack(side="right", padx=5, pady=2)
        
        self.progress = ttk.Progressbar(progress_frame,
                                      orient="horizontal",
                                      length=200,
                                      mode='determinate',
                                      style='Colored.Horizontal.TProgressbar')
        self.progress.pack(side="right")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        self.percent_label = ttk.Label(progress_frame,
                                     text="",
                                     style='Statusbar.TLabel')
        self.percent_label.pack(side="right", padx=(0, 5))

    def set_status(self, text: str, error: bool = False) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.configure(
            text=text,
            style='StatusbarError.TLabel' if error else 'Statusbar.TLabel'
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        self.status_label.update_idletasks()

    def show_progress(self, show: bool = True) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if show:
            self.progress.pack(side="right")
            self.percent_label.pack(side="right", padx=(0, 5))
        else:
            self.progress.pack_forget()
            self.percent_label.pack_forget()

    def set_progress(self, value: float) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress['value'] = value
        self.percent_label.configure(text=f"{int(value)}%")
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        self.progress.update_idletasks()
        self.percent_label.update_idletasks()


class ConnectionPanel(ttk.LabelFrame):
    """–ü–∞–Ω–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    def __init__(self, parent, on_connect: Callable, **kwargs):
        super().__init__(parent, text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", style='Connection.TFrame', **kwargs)
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        entries = [
            ("–°–µ—Ä–≤–µ—Ä:", "host", "localhost"),
            ("–ü–æ—Ä—Ç:", "port", "21"),
            ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "user", "user")
        ]
        
        self.entries = {}
        for i, (label, name, default) in enumerate(entries):
            ttk.Label(self, text=label).grid(row=i, column=0, padx=5, pady=2, sticky="e")
            entry = ttk.Entry(self)
            entry.insert(0, default)
            entry.grid(row=i, column=1, padx=5, pady=2, sticky="ew")
            self.entries[name] = entry
        
        # –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è
        ttk.Label(self, text="–ü–∞—Ä–æ–ª—å:").grid(row=3, column=0, padx=5, pady=2, sticky="e")
        pwd_frame = ttk.Frame(self)
        pwd_frame.grid(row=3, column=1, padx=5, pady=2, sticky="ew")
        
        self.password_entry = ttk.Entry(pwd_frame, show="*")
        self.password_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        self.show_password = tk.BooleanVar(value=False)
        self.toggle_pwd_btn = ttk.Button(pwd_frame, text="üëÅ", width=3,
                                       command=self._toggle_password_visibility)
        self.toggle_pwd_btn.pack(side=tk.LEFT, padx=(2, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connect_btn = ttk.Button(self, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                                    command=self._on_button_click,
                                    style="Primary.TButton")
        self.connect_btn.grid(row=4, column=0, columnspan=2, pady=5)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        self.columnconfigure(1, weight=1)
        
        self._on_connect_callback = on_connect
        self._is_connected = False

    def _on_button_click(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
        if self._is_connected:
            # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã - –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
            if self._on_connect_callback:
                self._on_connect_callback(None, None, None, None)
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            if self._on_connect_callback:
                self._on_connect_callback(
                    self.entries["host"].get(),
                    int(self.entries["port"].get()),
                    self.entries["user"].get(),
                    self.password_entry.get()
                )

    def _toggle_password_visibility(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        if self.show_password.get():
            self.password_entry.configure(show="*")
            self.show_password.set(False)
        else:
            self.password_entry.configure(show="")
            self.show_password.set(True)

    def set_connected_state(self, connected: bool) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self._is_connected = connected
        if connected:
            self.connect_btn.configure(text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è")
            for entry in self.entries.values():
                entry.configure(state="disabled")
            self.password_entry.configure(state="disabled")
        else:
            self.connect_btn.configure(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            for entry in self.entries.values():
                entry.configure(state="normal")
            self.password_entry.configure(state="normal")


class SearchPanel(ttk.LabelFrame):
    """–ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞"""
    def __init__(self, parent, on_search: Callable, **kwargs):
        super().__init__(parent, text="–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", style='Search.TFrame', **kwargs)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        input_frame = ttk.Frame(self)
        input_frame.pack(fill=tk.X, padx=5, pady=2)

        self.search_var = tk.StringVar()
        self.search_var.trace('w', lambda *args: self._on_search())
        
        self.search_entry = ttk.Entry(input_frame, textvariable=self.search_var)
        self.search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        ttk.Button(input_frame, text="‚úï", width=3,
                  command=self.clear_search).pack(side=tk.LEFT, padx=2)

        # –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        options_frame = ttk.Frame(self)
        options_frame.pack(fill=tk.X, padx=5, pady=2)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
        self.search_scope = tk.StringVar(value="both")
        ttk.Radiobutton(options_frame, text="–õ–æ–∫–∞–ª—å–Ω—ã–µ", 
                       variable=self.search_scope, 
                       value="local",
                       command=self._on_search).pack(side=tk.LEFT, padx=5)
        ttk.Radiobutton(options_frame, text="–£–¥–∞–ª–µ–Ω–Ω—ã–µ", 
                       variable=self.search_scope, 
                       value="remote",
                       command=self._on_search).pack(side=tk.LEFT, padx=5)
        ttk.Radiobutton(options_frame, text="–í–µ–∑–¥–µ", 
                       variable=self.search_scope, 
                       value="both",
                       command=self._on_search).pack(side=tk.LEFT, padx=5)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        self.case_sensitive = tk.BooleanVar(value=False)
        ttk.Checkbutton(options_frame, text="–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä",
                       variable=self.case_sensitive,
                       command=self._on_search).pack(side=tk.LEFT, padx=5)

        self.search_in_folders = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–ò—Å–∫–∞—Ç—å –≤ –ø–∞–ø–∫–∞—Ö",
                       variable=self.search_in_folders,
                       command=self._on_search).pack(side=tk.LEFT, padx=5)

        self._on_search_callback = on_search

    def clear_search(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        self.search_var.set("")

    def _on_search(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        if self._on_search_callback:
            self._on_search_callback(
                self.search_var.get(),
                self.search_scope.get(),
                self.case_sensitive.get(),
                self.search_in_folders.get()
            )


class PathPanel(ttk.Frame):
    """–ü–∞–Ω–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–∏"""
    def __init__(self, parent, on_path_change: Optional[Callable] = None, **kwargs):
        super().__init__(parent, style='Path.TFrame', **kwargs)
        
        self.path_var = tk.StringVar()
        self.label = ttk.Label(self, textvariable=self.path_var)
        self.label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        if on_path_change:
            self.browse_btn = ttk.Button(self, text="...",
                                       command=lambda: self._browse_directory(on_path_change))
            self.browse_btn.pack(side=tk.RIGHT, padx=2)

    def set_path(self, path: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏"""
        self.path_var.set(path)

    def _browse_directory(self, callback: Callable) -> None:
        """–í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directory = filedialog.askdirectory(initialdir=self.path_var.get())
        if directory:
            callback(directory) 